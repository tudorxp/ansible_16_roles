---

- name: stat the pgsql config
  stat: path="{{ pg_cluster }}/postgresql.conf"
  register: postgresql_conf

- name: fail if config file not found
  fail: "msg='couldnt open postgresql.conf file at supplied location: {{ pg_cluster }}'"
  when: postgresql_conf.stat.exists == false

- name: check if postgres is started - if yes, don't do anything
  shell: service postgresql status || true
  register: pgrunning

- name: modify postgresql.conf
  lineinfile:
    dest: "{{ pg_cluster }}/postgresql.conf"
    regexp: "^{{item.regexp}}"
    line: "{{item.line}}"
    backrefs: true
    backup: true
  with_items:
      - { regexp: '^#listen_addresses', line: 'listen_addresses = ''*''' }
      - { regexp: '^max_connections = ', line: 'max_connections = 1000' }
      - { regexp: '^shared_buffers = ', line: 'shared_buffers = {{ pg_shared_buffers_mem | default (ansible_memtotal_mb // 2.2) |int }}MB' }
      - { regexp: '^#?temp_buffers = ', line: 'temp_buffers = {{ 16 if ansible_memtotal_mb<=2000 else (ansible_memtotal_mb*0.04) |int }}MB' }
      - { regexp: '^#?work_mem = ', line: 'work_mem = {{ 16 if ansible_memtotal_mb<=2000 else (ansible_memtotal_mb*0.004) |int }}MB' }
      - { regexp: '^#?maintenance_work_mem = ', line: 'maintenance_work_mem = {{ 16 if ansible_memtotal_mb<=2000 else (ansible_memtotal_mb*0.03) |int }}MB' }
      - { regexp: '^#?max_wal_senders = ', line: 'max_wal_senders = 20' }
      - { regexp: '^#?wal_keep_segments = ', line: 'wal_keep_segments = {{ pg_wal_keep_segments |default (4000) }} ' } # 64GB worth of WAL logs
      - { regexp: '^#?log_destination = ', line: 'log_destination = ''csvlog''' } 
      - { regexp: '^#?logging_collector = ', line: 'logging_collector = on' } 
      - { regexp: '^#?log_directory = ', line: 'log_directory = ''/home/postgres/logs''' } 
      - { regexp: '^#?log_min_duration_statement', line: 'log_min_duration_statement = 2000' } 
      - { regexp: '^#?log_timezone ', line: 'log_timezone = ''GB''' } 
      - { regexp: '^#?timezone ', line: 'timezone = ''GB''' } 
      - { regexp: '^#?hot_standby ', line: 'hot_standby = ''on''' } 
      - { regexp: '^#?hot_standby_feedback ', line: 'hot_standby_feedback = ''on''' } 
  when:
    postgresql_conf.stat.exists == true and
    ' server is running' not in pgrunning.stdout

- name: modify postgresql.conf for postgres 9.6+
  lineinfile:
    dest: "{{ pg_cluster }}/postgresql.conf"
    regexp: "^{{item.regexp}}"
    line: "{{item.line}}"
    backrefs: true
    backup: true
  with_items:
    - { regexp: '^#?wal_level = ', line: 'wal_level = ''logical''' }
  when:
    postgresql_conf.stat.exists == true and
    ' server is running' not in pgrunning.stdout and
    (pg_version | regex_replace ('^([0-9]+)\.([0-9]+).*', '\\1\\2')) |int >= 96

- name: modify postgresql.conf for postgres <= 9.5
  lineinfile:
    dest: "{{ pg_cluster }}/postgresql.conf"
    regexp: "^{{item.regexp}}"
    line: "{{item.line}}"
    backrefs: true
    backup: true
  with_items:
    - { regexp: '^#?wal_level = ', line: 'wal_level = ''logical''' }
  when:
    postgresql_conf.stat.exists == true and
    ' server is running' not in pgrunning.stdout and
    (pg_version | regex_replace ('^([0-9]+)\.([0-9]+).*', '\\1\\2')) |int < 96

- name: set postgresql logs to expire after 90 days
  cron: name="expire postgres logs" user=postgres minute="33" hour="22" job="find /home/postgres/logs -type f -name '*.csv' -mtime +90 -delete >/dev/null"
  when: "' server is running' not in pgrunning.stdout"

- name: start postgres 
  service: name=postgresql state=started 
  when: "' server is running' not in pgrunning.stdout"

- name: make sure postgres is enabled (if autostart true)
  service: name=postgresql enabled=yes
  when: "' server is running' not in pgrunning.stdout and pg_autostart == true"

- name: make sure postgres is disabled (if autostart false)
  service: name=postgresql enabled=no
  when: "' server is running' not in pgrunning.stdout and pg_autostart == false"

- name: install psycopg2 for python <=> postgresql
  yum: pkg=python-psycopg2 state=present
  when: "' server is running' not in pgrunning.stdout"

- name: add a password for postgres user
  postgresql_user: 
    name=postgres
    login_host=localhost
    login_user=postgres
    login_password="{{ lookup('password','credentials/' + inventory_hostname + '/pgsql_postgres_password length=32 chars=hexdigits') }}"
    password="{{ lookup('password','credentials/' + inventory_hostname + '/pgsql_postgres_password length=32 chars=hexdigits') }}"
    encrypted=yes
    role_attr_flags=superuser,login
  when: "' server is running' not in pgrunning.stdout"
  register: result
  until: result|success

- name: create /home/postgres/.pgpass
  file: dest=/home/postgres/.pgpass owner=postgres group=postgres mode=600 state=touch
  when: "' server is running' not in pgrunning.stdout"

- name: add postgres user password in /home/postgres/.pgpass
  lineinfile:
    dest: "/home/postgres/.pgpass"
    line: "localhost:5432:postgres:postgres:{{ lookup('password','credentials/' + inventory_hostname + '/pgsql_postgres_password length=32 chars=hexdigits') }}"
  when: "' server is running' not in pgrunning.stdout"
    

- name: create replication user
  postgresql_user: 
    name=repuser
    login_host=localhost
    login_user=postgres
    login_password="{{ lookup('password','credentials/' + inventory_hostname + '/pgsql_postgres_password length=32 chars=hexdigits') }}"
    password="{{ lookup('password','credentials/' + inventory_hostname + '/pgsql_repuser_password length=32 chars=hexdigits') }}"
    encrypted=yes
    role_attr_flags=nosuperuser,login,replication
  when: "' server is running' not in pgrunning.stdout"

- name: stat pgsql pg_hba.conf
  stat: path="{{ pg_cluster }}/pg_hba.conf"
  register: pghba_conf

- name: fail if pg_hba.conf file not found
  fail: "msg='couldnt open pg_hba.conf file at supplied location: {{ pg_cluster }}'"
  when: >
    "' server is running' not in pgrunning.stdout"
    and pghba_conf.stat.exists == false 

- name: modify pg_hba.conf
  lineinfile:
    dest: "{{ pg_cluster }}/pg_hba.conf"
    regexp: "^{{item.regexp}}"
    line: "{{item.line}}"
    backrefs: true
    backup: true
  with_items:
      - { regexp: '^local\s+all',                          line: 'local     all           all                                      md5' }
      - { regexp: '^host\s+all\s+all\s+127.0.0.1',         line: 'host      all           all              127.0.0.1/32            md5' }
      - { regexp: '^host\s+all\s+all\s+::1\/',             line: 'host      all           all              ::1/128                 md5' }
  when: "' server is running' not in pgrunning.stdout"

- name: add replication user to pg_hba.conf
  lineinfile:
    dest: "{{ pg_cluster }}/pg_hba.conf"
    line: "{{item.line}}"
    backup: true
    state: present
  with_items:
      - { line: 'host     replication     repuser         0/0                     md5' }
      - { line: 'host     replication     repuser         ::/0                    md5' }
  when: "' server is running' not in pgrunning.stdout"

- name: find additional remote hosts for pg_hba.conf
  set_fact:
    pg_hba_hosts: "{{ pg_hba_hosts | default([]) + groups[item] }}"
  with_items: "{{ pg_hba_allow_groups }}"
  when: "' server is running' not in pgrunning.stdout"


- name: add additional remote hosts to pg_hba.conf
  lineinfile:
    dest: "{{ pg_cluster }}/pg_hba.conf"
    line: "host     all             all             {{ (item | ipaddr('net')) | ternary(item, (item | ipv4) | ternary (item ~ '/32', item ~ '/64') ) }}                md5"
    backup: true
    state: present
  with_items: "{{ pg_hba_hosts | default([]) }}"
  when: "' server is running' not in pgrunning.stdout"

#  the expression adds CIDR-style netmasks to IPs if they don't have it
#- name: debug
#  debug: msg="{{ (item | ipaddr('net')) | ternary(item, (item | ipv4) | ternary (item ~ '/32', item ~ '/64') ) }}"
#  with_items: "{{ pg_hba_allow_ips }}"

- name: add additional ips to pg_hba.conf
  lineinfile:
    dest: "{{ pg_cluster }}/pg_hba.conf"
    line: "host     all             all             {{ (item | ipaddr('net')) | ternary(item, (item | ipv4) | ternary (item ~ '/32', item ~ '/64') ) }}                md5"
    backup: true
    state: present
  with_items: "{{ pg_hba_allow_ips | default([]) }}"
  when: "' server is running' not in pgrunning.stdout"

- name: run chown over the whole cluster (because backup files are created as root...)
  command: chown -R postgres.postgres {{ pg_cluster }}

- name: restart postgresql 
  service: name=postgresql state=restarted
  when: "' server is running' not in pgrunning.stdout"
